{-# START_FILE {{name}}.cabal #-}
name:                {{name}}
version:             0.1.0.0
-- synopsis:
-- description:
homepage:            https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme
license:             BSD3
license-file:        LICENSE
author:              {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer:          {{author-email}}{{^author-email}}example@example.com{{/author-email}}
copyright:           {{copyright}}{{^copyright}}{{year}}{{^year}}2017{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}
category:            {{category}}{{^category}}Web{{/category}}
build-type:          Simple
extra-source-files:  README.md
cabal-version:       >=1.10

library
  default-extensions: CPP
  hs-source-dirs:      src
  ghc-options:         -Wall
  exposed-modules:     Lib
  build-depends:       base >= 4.7 && < 5
                     , transient
                     , transient-universe
                     , ghcjs-hplay
  if impl(ghcjs)
    build-depends:
        ghcjs-base
  default-language:    Haskell2010

executable {{name}}
  default-extensions: CPP
  hs-source-dirs:      src
  main-is:             Main.hs
  ghc-options:         -Wall
  if impl(ghcjs)
    cpp-options: -DGHCJS_BROWSER
  build-depends:       base
                     , transient
                     , transient-universe
                     , ghcjs-hplay
                     , {{name}}
  if impl(ghcjs)
    build-depends:
        ghcjs-base
  default-language:    Haskell2010

source-repository head
  type:     git
  location: https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}
{-# START_FILE src/Main.hs #-}
module Main where

import Lib

main :: IO ()
main = run
{-# START_FILE src/Lib.hs #-}
{-# LANGUAGE OverloadedStrings #-}
module Lib
    ( run
    ) where

import Transient.Move
import GHCJS.HPlay.View

#ifdef ghcjs_HOST_OS
import GHCJS.Types
import Data.JSString
#endif

run :: IO ()
run = simpleWebApp 8080 $ do
  local $ render view

view :: Widget ()
view = rawHtml $ h1 ("Hello world" :: String)

{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) {{year}}{{^year}}2017{{/year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}}{{^author-name}}Author name here{{/author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
{-# START_FILE README.md #-}
# {{name}}

add description of {{name}} here

{-# START_FILE Build.hs #-}
#!/usr/bin/env stack
-- stack --resolver lts-8.11 --install-ghc runghc --package turtle-1.3.2 --package foldl
{-# LANGUAGE OverloadedStrings #-}

import Prelude hiding (FilePath)
import Turtle
import Control.Monad (when)
import Data.Text as T
import Data.Text (Text)
import System.Info (os)
import qualified Control.Foldl as Foldl
import Filesystem.Path.CurrentOS

clientStackYaml = "client-stack.yaml"
serverStackYaml = "stack.yaml"

main = do
  projectDirectory <- pwdAsText
  BuildCommand all gui core run <- options "{{name}} build file" buildSwitches
  if all
    then buildAll projectDirectory
    else do
      when gui          $ buildGUI          projectDirectory
      when core         $ buildCore         projectDirectory
      when run          $ runHaskellDo      projectDirectory


buildSwitches :: Parser BuildCommand
buildSwitches = BuildCommand
     <$> switch "all"          'a' "Build all platforms, without running {{name}}"
     <*> switch "gui"          'g' "Build GUI"
     <*> switch "core"         'c' "Build core"
     <*> switch "run"          'r' "Run {{name}}"

buildAll projectDirectory = do
  buildCore projectDirectory
  buildGUI projectDirectory

buildCore :: Text -> IO ()
buildCore pdir = do
  echo "Building core"
  exitCode <- shell ("stack build --stack-yaml=" <> serverStackYaml) ""
  when (exitCode /= ExitSuccess) (error "Core: Build failed")
  return ()


buildGUI pdir =
  if isWindows os
    then die "GHCJS currently does not support Windows, please try from a *nix machine."
    else do
      echo "Building GUI"
      shell "mkdir -p static" ""
      Just directory <- fold (inshell "stack path --stack-yaml=client-stack.yaml --local-install-root" Turtle.empty) Foldl.head
      exitCode <- shell ("stack build --stack-yaml=" <> clientStackYaml) ""
      when (exitCode /= ExitSuccess) (error "GUI: Build failed")
      shell "rm -rf static/out.jsexe" ""
      shell ("cp -R " <> lineToText directory <> "/bin/{{name}}.jsexe static/out.jsexe") ""
      return ()


runHaskellDo pdir = do
  echo "Running {{name}}"
  shell ("stack exec {{name}} --stack-yaml=" <> serverStackYaml) ""
  return ()




-- Helpers
isWindows operatingSystem = "mingw" `T.isPrefixOf` T.pack operatingSystem
isOSX operatingSystem = "darwin" `T.isPrefixOf` T.pack operatingSystem

makeTextPath = T.pack . encodeString . fromText

pwdAsText :: IO Text
pwdAsText = T.pack <$> encodeString <$> pwd

data BuildCommand = BuildCommand
  { buildCommandAll          :: Bool
  , buildCommandGui          :: Bool
  , buildCommandCore         :: Bool
  , buildCommandRun          :: Bool
  }
{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain
{-# START_FILE client-stack.yaml #-}
resolver: lts-7.19
compiler: ghcjs-0.2.1.9007019_ghc-8.0.1
compiler-check: match-exact

setup-info:
  ghcjs:
    source:
      ghcjs-0.2.1.9007019_ghc-8.0.1:
           url: http://ghcjs.tolysz.org/ghc-8.0-2017-02-05-lts-7.19-9007019.tar.gz
           sha1: d2cfc25f9cda32a25a87d9af68891b2186ee52f9

packages:
- '.'

extra-deps: []

flags: {}

extra-package-dbs: []
